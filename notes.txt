1. HMVC Yapısının Kurulması

To install via Composer, run:

composer require nwidart/laravel-modules


Publish the package's configuration file by running:

php artisan vendor:publish --provider="Nwidart\Modules\LaravelModulesServiceProvider"

By default, the module classes are not loaded automatically. You can autoload your modules by adding merge-plugin to the extra section; in root folder find composer.json file and find "extra" section then add below code;

"extra": {
    "laravel": {
        "dont-discover": []
    },
    "merge-plugin": {
        "include": [
            "Modules/*/composer.json"
        ]
    }
},

Then do not forget to run below command;

composer dump-autoload

Creating a Sample Module ;

php artisan module:make posts

Then when you visit https://testsite.test/blog

Hello World
Module: Blog   

page which shows module Blog is working correctly.

2. MULTİ-SİTE DESTEĞİ (Farklı Domain ve Subdomain için)

A. Config Dosyası ile Site Tanımları

Tüm site ayarlarını tek bir yerden yönetmek için bir yapılandırma dosyası (config/sites.php) oluşturun:

return [
    'sites' => [
        'site1' => [
            'domain' => 'site1.example.com',
            'db_connection' => 'mysql_site1',
            'theme' => 'theme1',
        ],
        'site2' => [
            'domain' => 'example2.com',
            'db_connection' => 'mysql_site2',
            'theme' => 'theme2',
        ],
    ],
    'default_site' => 'site1', // Varsayılan site
];

B. Middleware ile Dinamik Site Algılama

Alt ve farklı domainleri algılayarak ilgili ayarları uygulayan bir middleware oluşturun.

php artisan make:middleware DetectSite

Middleware içerisine aşağıdaki kodları ekleyin.

<?php

namespace App\Http\Middleware;

use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;
use Closure;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Log;
use Illuminate\View\FileViewFinder;



class DetectSite
{
    public function handle(Request $request, Closure $next): Response
    {
        $host = $request->getHost();
        $sites = config('sites.sites');
        $defaultSite = config('sites.default_site');

        $currentSite = collect($sites)->firstWhere('domain', $host) ?? $sites[$defaultSite];

        if (!$currentSite) {
            abort(404, 'Site configuration not found for domain: ' . $host);
        }

        Log::info('Current Site:', $currentSite);

        // Veritabanı bağlantısını ayarla
        Config::set('database.default', $currentSite['db_connection']);

        // Aktif temayı ayarla
        Config::set('app.theme', $currentSite['theme']);



        return $next($request);
    }
}

C. Middleware’i bootstrap/app.php Üzerinden Tanımlama

bootstrap/app.php dosyasını açın bu middleware'i global olarak kaydetmek için aşağıdaki kodu ekleyin:

->withMiddleware(function (Middleware $middleware) {
        // Middleware'i doğrudan buraya ekliyoruz.
        $middleware->append(DetectSite::class);
    })

D. Veritabanı Bağlantılarını config/database.php Dosyasına Ekleyin

config/database.php Dosyasını Açın: Bu dosyada farklı veritabanı bağlantılarını tanımlamanız gerekiyor.

Bağlantıları Tanımlayın: connections array'ine mysql_site1 ve mysql_site2 gibi bağlantılarınızı ekleyin.

'connections' => [
    'mysql' => [
        'driver' => 'mysql',
        'host' => env('DB_HOST', '127.0.0.1'),
        'port' => env('DB_PORT', '3306'),
        'database' => env('DB_DATABASE', 'forge'),
        'username' => env('DB_USERNAME', 'forge'),
        'password' => env('DB_PASSWORD', ''),
        'unix_socket' => env('DB_SOCKET', ''),
        'charset' => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix' => '',
        'strict' => true,
        'engine' => null,
        'options' => extension_loaded('pdo_mysql') ? array_filter([
            PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
        ]) : [],
    ],

    'mysql_site1' => [
        'driver' => 'mysql',
        'host' => env('DB_SITE1_HOST', '127.0.0.1'),
        'port' => env('DB_SITE1_PORT', '3306'),
        'database' => env('DB_SITE1_DATABASE', 'site1_db'),
        'username' => env('DB_SITE1_USERNAME', 'root'),
        'password' => env('DB_SITE1_PASSWORD', ''),
        'unix_socket' => env('DB_SITE1_SOCKET', ''),
        'charset' => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix' => '',
        'strict' => true,
        'engine' => null,
        'options' => extension_loaded('pdo_mysql') ? array_filter([
            PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
        ]) : [],
    ],

    'mysql_site2' => [
        'driver' => 'mysql',
        'host' => env('DB_SITE2_HOST', '127.0.0.1'),
        'port' => env('DB_SITE2_PORT', '3306'),
        'database' => env('DB_SITE2_DATABASE', 'site2_db'),
        'username' => env('DB_SITE2_USERNAME', 'root'),
        'password' => env('DB_SITE2_PASSWORD', ''),
        'unix_socket' => env('DB_SITE2_SOCKET', ''),
        'charset' => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix' => '',
        'strict' => true,
        'engine' => null,
        'options' => extension_loaded('pdo_mysql') ? array_filter([
            PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
        ]) : [],
    ],
],


E. Domain/Subdomain Testleri

hosts Dosyasını Güncelleyin: Subdomain ve domain yapılandırmalarını test etmek için hosts dosyanıza şu girişleri ekleyin:

127.0.0.1   site1.example.com
127.0.0.1   example2.com

Local ortamda Laravel’in yerleşik sunucusunu başlatın:

php artisan serve --host=127.0.0.1 --port=8000

site1.example.com:8000 ve example2.com:8000 adreslerine erişerek test edin.




3. Multi-Theme Desteği (HMVC ve nwidart/laravel-modules ile)

A. Modüllerle Uyumlu Tema Yönetimi
Tüm modüllerin kendi views klasöründe temaları yönetmesini sağlayacak bir yapı ekliyoruz.

config/themes.php dosyası:

<?php
return [
  'default_theme' => 'theme1', // Varsayılan tema

  'themes' => [
    'theme1' => [
      'views_path' => 'Modules/{module}/Resources/views/themes/theme1',
    ],
    'theme2' => [
      'views_path' => 'Modules/{module}/Resources/views/themes/theme2',
    ],
  ],
];

B. Tema Yollarının Dinamik olarak register edilmesi İçin bir BaseModuleServiceProvider oluşturalım içeriği:

<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Config;

class BaseModuleServiceProvider extends ServiceProvider
{
  protected string $name = ''; // Modül adı
  protected string $theme = ''; // Tema adı

  /**
   * Boot işlemleri.
   */
  public function boot(): void
  {
    $this->registerThemeAndViews();
    $this->registerModuleViewNamespaces();
  }

  /**
   * Tema ve view yollarını dinamik olarak ayarlar.
   */
  protected function registerThemeAndViews(): void
  {
    // Aktif tema adı
    $theme = $this->theme ?: config('app.theme');
    Config::set('app.theme', $theme);

    // Modül view yolları
    $themePath = resource_path("views/themes/{$theme}");
    $modulePaths = glob(base_path("Modules/*/Resources/views/themes/{$theme}"), GLOB_ONLYDIR);

    // Laravel View Finder ile view yollarını ayarla
    $viewFinder = app('view.finder');
    $viewPaths = array_merge($modulePaths, [$themePath], $viewFinder->getPaths());
    $viewFinder->setPaths($viewPaths);

    // Varsayılan view namespace'ini yükle
    $this->loadViewsFrom(module_path($this->name, 'Resources/views'), $this->name);

    // Blade Cache'i tema bazlı ayarla
    $compiledPath = storage_path("framework/views/{$theme}");
    if (!is_dir($compiledPath)) {
      mkdir($compiledPath, 0755, true);
    }
    Config::set('view.compiled', $compiledPath);

    // Loglama
    logger()->info("Views and theme paths registered for module: {$this->name}", $viewFinder->getPaths());
  }

  /**
   * Modül view namespace'lerini dinamik olarak ekle.
   */
  protected function registerModuleViewNamespaces(): void
  {
    $currentTheme = config('app.theme', config('themes.default_theme'));
    $modules = app('modules')->allEnabled();

    foreach ($modules as $module) {
      $viewPath = str_replace(
        '{module}',
        $module->getName(),
        config("themes.themes.$currentTheme.views_path")
      );

      if (is_dir(base_path($viewPath))) {
        view()->addNamespace($module->getLowerName(), base_path($viewPath));
      }
    }
  }
}


C. Tema Load işleminin dinamikleştirilmesi için bir app/Http/Controllers/BaseController.php  dosyası oluşturalım:

<?php

namespace App\Http\Controllers;

use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\Log;

class BaseController extends Controller
{
  /**
   * Dinamik olarak temaya ve modüle özgü view döndürür.
   *
   * @param string $view
   * @param array $data
   * @return \Illuminate\View\View
   */
  protected function loadView(string $view, array $data = [])
  {
    $theme = config('app.theme');
    $module = $this->getModuleName();

    if (!$module) {
      abort(500, 'Module name could not be determined.');
    }

    // Temaya ve modüle özgü view yolu
    $themeView = "{$module}::themes.{$theme}.{$view}";
    Log::info("Checking view existence: {$themeView}");
    $defaultView = "{$module}::default.{$view}";
    Log::info("Default view: {$defaultView}");

    if (view()->exists($themeView)) {
      Log::info("View found: {$themeView}");
      return view($themeView, $data);
    } elseif (view()->exists($defaultView)) {
      Log::info("Falling back to default view: {$defaultView}");
      return view($defaultView, $data);
    } else {

      Log::info("View Path Hatalı: ['View Yok']");
    }

    abort(404, "View [{$themeView}] or [{$defaultView}] not found.");
  }

  /**
   * Modül adını belirle.
   *
   * @return string|null
   */
  protected function getModuleName()
  {
    $namespaceParts = explode('\\', static::class);

    if (in_array('Modules', $namespaceParts)) {
      $module = $namespaceParts[array_search('Modules', $namespaceParts) + 1];
      Log::info("Detected Module Name: {$module}");
      return $module;;
    }

    return null;
  }
}


D. Yeni bir Modül oluşturulduğunda aşağıdaki düzenlemelerin modül dosyalarında yapılması gerekiyor;

ModulenameServiceProvider.php dosyasındaki extends Service Provider kısmını BaseModuleServiceProvider olarak güncelle,

Bul
class NewsServiceProvider extends ServiceProvider
{

Değiştir

use App\Providers\BaseModuleServiceProvider;
class NewsServiceProvider extends BaseModuleServiceProvider
{

Aynı dosya da boot methodundaki;
Bul
$this->registerViews();
Değiştir
$this->registerThemeAndViews(); // BaseModuleServiceProvider dan geliyor

Modüldeki app/Http/Controllers/ModulenameController.php dosyasındaki methodlarda şu düzenlemeyi yapın;

üst kısma şunu ekle;

use App\Http\Controllers\BaseController;

Bul

return view('news::index');

Değiştir

return $this->loadView('index');

D. Tema Yapısını Organize Etme

Modüllerdeki views klasörünü şu şekilde organize edin:

Modules/
  Blog/
    Resources/
        views
          themes/
             theme1/
                index.blade.php
          theme2/
                index.blade.php


D. Dinamik Tema Testi
Her site için doğru temayı test edin:

site1.example.com için theme1'in index.blade.php dosyasını düzenleyin:
html
Kodu kopyala
<h1>Bu Theme1 için bir testtir</h1>
example2.com için theme2'nin görünümünü düzenleyin:
html
Kodu kopyala
<h1>Bu Theme2 için bir testtir</h1>

Test URL

site1.example.com/modulename

example2.com/modulename

4. Multi-Theme Desteğinin HMVC modül olarak Dinamik Hale Getirilmesi

php artisan module:make MultiSite

Müşteri siteleri ve hosting bilgilerini saklamak için gerekli tabloları tanımlıyoruz.

php artisan make:migration create_sites_table --path=Modules/MultiSite/Database/Migrations

Migration Dosyalarını Güncelle

Modules/MultiSite/Database/Migrations/xxxx_xx_xx_create_sites_table.php:

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateSitesTable extends Migration
{
    public function up()
    {
        Schema::create('sites', function (Blueprint $table) {
            $table->id();
            $table->string('domain')->unique();
            $table->string('theme')->nullable();
            $table->unsignedBigInteger('hosting_id')->nullable();
            $table->string('db_name')->nullable();
            $table->timestamps();

            $table->foreign('hosting_id')->references('id')->on('hostings')->onDelete('set null');
        });
    }

    public function down()
    {
        Schema::dropIfExists('sites');
    }
}

php artisan make:migration create_hostings_table --path=Modules/MultiSite/Database/Migrations

Modules/MultiSite/Database/Migrations/xxxx_xx_xx_create_hostings_table.php:

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateHostingsTable extends Migration
{
    public function up()
    {
        Schema::create('hostings', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('db_host');
            $table->integer('max_capacity')->default(10);
            $table->integer('current_capacity')->default(0);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('hostings');
    }
}


php artisan make:migration create_orders_table --path=Modules/MultiSite/Database/Migrations

Modules/MultiSite/Database/Migrations/create_orders_table.php

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateOrdersTable extends Migration
{
    public function up()
    {
        Schema::create('orders', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('site_id');
            $table->date('start_date');
            $table->date('end_date');
            $table->string('status')->default('active');
            $table->timestamps();

            $table->foreign('site_id')->references('id')->on('sites')->onDelete('cascade');
        });
    }

    public function down()
    {
        Schema::dropIfExists('orders');
    }
}

Model’lerin Hazırlanması

Hosting Modeli

Modules/MultiSite/Entities/Hosting.php

<?php

namespace Modules\MultiSite\Entities;

use Illuminate\Database\Eloquent\Model;

class Hosting extends Model
{
    protected $fillable = ['name', 'db_host', 'max_capacity', 'current_capacity'];

    public function sites()
    {
        return $this->hasMany(Site::class);
    }
}


Site Modeli

Modules/MultiSite/Entities/Site.php

<?php

namespace Modules\MultiSite\Entities;

use Illuminate\Database\Eloquent\Model;

class Site extends Model
{
    protected $fillable = ['domain', 'theme', 'hosting_id', 'db_name'];

    public function hosting()
    {
        return $this->belongsTo(Hosting::class);
    }

    public function orders()
    {
        return $this->hasMany(Order::class);
    }
}

Order Modeli

Modules/MultiSite/Entities/Order.php

<?php

namespace Modules\MultiSite\Entities;

use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;

class Order extends Model
{
    protected $fillable = ['site_id', 'start_date', 'end_date', 'status'];

    public function site()
    {
        return $this->belongsTo(Site::class);
    }

    public function isExpired(): bool
    {
        return Carbon::now()->greaterThan($this->end_date);
    }
}

Service Provider

Modules/MultiSite/Providers/MultiSiteServiceProvider.php

Service Provider

Modules/MultiSite/Providers/MultiSiteServiceProvider.php


<?php

namespace Modules\MultiSite\Providers;

use Illuminate\Support\ServiceProvider;
use Modules\MultiSite\Entities\Site;

class MultiSiteServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        $this->loadMigrationsFrom(module_path('MultiSite', 'Database/Migrations'));
        $this->registerSiteConfiguration();
    }

    protected function registerSiteConfiguration(): void
    {
        $host = request()->getHost();

        $site = Site::where('domain', $host)->with('orders')->first();

        if (!$site) {
            abort(404, "Site not found for domain: {$host}");
        }

        $activeOrder = $site->orders()->where('status', 'active')->latest('end_date')->first();

        if (!$activeOrder || $activeOrder->isExpired()) {
            abort(403, "The service for this site has expired.");
        }

        config()->set('database.connections.dynamic', [
            'driver' => 'mysql',
            'host' => $site->hosting->db_host,
            'database' => $site->db_name,
            'username' => env('DB_USERNAME'),
            'password' => env('DB_PASSWORD'),
        ]);

        config()->set('database.default', 'dynamic');
        config()->set('app.theme', $site->theme);
    }
}

Middleware

Modules/MultiSite/Http/Middleware/DetectSite.php

<?php

namespace Modules\MultiSite\Http\Middleware;

use Closure;
use Modules\MultiSite\Entities\Site;

class DetectSite
{
    public function handle($request, Closure $next)
    {
        $host = $request->getHost();

        $site = Site::where('domain', $host)->with('orders')->first();

        if (!$site) {
            abort(404, "Site not found for domain: {$host}");
        }

        return $next($request);
    }
}

Not: Bu aşamada MultiSiteServiceProvider.php boot methodundaki $this->registerSiteConfiguration();  kodu hata verecek onu önce çift slash ile etkisiz hale getirin sonra aşağıdaki komutları çalıştırdıktan sonra aktif edin.

php artisan tinker

Hosting Kaydı Ekleyin:

use Modules\MultiSite\Entities\Hosting;

$hosting = Hosting::create([
    'name' => 'Hosting1',
    'db_host' => '127.0.0.1',
    'max_capacity' => 10,
    'current_capacity' => 0,
]);

Site Kaydı Ekleyin:

use Modules\MultiSite\Entities\Site;

$site = Site::create([
    'domain' => 'site1.test',
    'theme' => 'theme1',
    'hosting_id' => $hosting->id,
    'db_name' => 'site1_db',
]);

Sipariş (Order) Kaydı Ekleyin:

use Modules\MultiSite\Entities\Order;

Order::create([
    'site_id' => $site->id,
    'start_date' => now(),
    'end_date' => now()->addYear(),
    'status' => 'active',
]);

Tinker Konsolundan Çıkın:

    exit

MultiSiteServiceProvider.php dosyasında pasif hale getirdiğiniz kodu aktif edin. 


Test Adresine Erişim

Localhost Üzerinde Domain Yönlendirmesi: site1.test gibi bir domaini test etmek için hosts dosyanıza bir kayıt eklemeniz gerekir:
Windows: C:\Windows\System32\drivers\etc\hosts
Dosyaya şu satırı ekleyin:

127.0.0.1 site1.test


Eski dosyaları Silin;

config/sites.php silinecek

Modules/MultiSite/modules.json içerisine şu kodu ekleyin;

{
    "name": "MultiSite",
    "alias": "multisite",
    "description": "",
    "keywords": [],
    "priority": 0,
    "providers": [
        "Modules\\MultiSite\\Providers\\MultiSiteServiceProvider",
        "Modules\\MultiSite\\Providers\\EventServiceProvider",
        "Modules\\MultiSite\\Providers\\RouteServiceProvider"
    ],
    "files": [
        "app/Http/Middleware/DetectSite.php",
        "Entities/Site.php",
        "Entities/Order.php",
        "Entities/Hosting.php"
    ]
}

Modules/MultiSite/composer.json içerisinde autoload psr-4 kısmına şu kodu ekleyin;

"autoload": {
        "psr-4": {
            "Modules\\MultiSite\\": "app/",
            "Modules\\MultiSite\\Database\\Factories\\": "database/factories/",
            "Modules\\MultiSite\\Database\\Seeders\\": "database/seeders/",
            "Modules\\MultiSite\\Entities\\": "entities/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Modules\\MultiSite\\Tests\\": "tests/"
        }
    }

app/Http/Providers/MultiSiteServiceProvider.php dosyasında registerSiteConfiguration methodundan yapılan config/sites.php dosyasına olan request kısmını silin.

//$sites = config('sites.sites');


Laravel Uygulamasını Başlatın:

php artisan serve --host=127.0.0.1 --port=8000

Tarayıcıda Test Edin (veritabanından order tablosundan end_date editleyerek kontrol sağlanabilir.):
http://site1.test:8000 adresine gidin.
Eğer hizmet süresi dolmamışsa, tema veya varsayılan sayfa yüklenir.
Eğer hizmet süresi dolmuşsa, 403 - Service expired hatası görürsünüz.


Varsayılan Route Ayarı

Eğer site1.test için bir varsayılan ana sayfa döndürmek istiyorsanız, aşağıdaki adımları izleyin:

    routes/web.php İçin Varsayılan Route Ayarı:

use Illuminate\Support\Facades\Route;

Route::get('/', function () {
    $theme = config('app.theme'); // Aktif temayı al
    return view("themes.{$theme}.index");
});

Tema İçin Varsayılan View Dosyası: resources/views/themes/theme1/index.blade.php dosyasını oluşturun ve içine bir ana sayfa içeriği ekleyin:

    <h1>Welcome to Theme 1</h1>